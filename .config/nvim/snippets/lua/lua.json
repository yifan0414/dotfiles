{
  "return": {
    "body": ["return $0"],
    "prefix": "return",
    "description": "return value"
  },
  "while": { "body": ["while ${1:true} do", "\t$0", "end"], "prefix": "while" },
  "pcall": {
    "body": ["pcall(${1:function})"],
    "prefix": "pca",
    "description": "Protect call a function"
  },
  "keys": {
    "body": [
      "{",
      "  \"${1:}\",",
      "  mode = { \"n\", \"x\" },",
      "  ${2:},",
      "  desc = \"${3:}\",",
      "},"
    ],
    "prefix": "keys"
  },
  "require": {
    "body": "require(\"${0:module}\")",
    "prefix": "require",
    "description": "Require module"
  },
  "foreach": {
    "body": ["for i, ${1:x} in pairs(${2:table}) do", "\t$0", "end"],
    "prefix": "foreach"
  },
  "locreq": {
    "body": ["local ${1:var} = require(\"${2:module}\")"],
    "prefix": "lreq",
    "description": "Require module as a variable"
  },
  "print": { "body": ["print(${0})"], "prefix": "print" },
  "elseif": { "body": ["elseif ${1:true} then", "\t$0"], "prefix": "elseif" },
  "self": {
    "body": ["function self:${1:methodName}($2)", "\t$0", "end"],
    "prefix": "self:"
  },
  "for": {
    "body": ["for ${1:i}=${2:1},${3:10} do", "\t$0", "end"],
    "prefix": "for",
    "description": "for loop range"
  },
  "function": {
    "body": ["function ${1}($2)", "\t${0}", "end"],
    "prefix": "function"
  },
  "locpcall": {
    "body": ["local ${1:status}, ${2:err_or_value} = pcall(${3:function})"],
    "prefix": "lpca",
    "description": "Protect call a function as a variable"
  },
  "class": {
    "body": [
      "${1:className} = {}\n",
      "$1.${2:new} = function($3)",
      "\tlocal ${4:varName} = ${5:value}\n",
      "\t${6: --code}\n",
      "\treturn $4",
      "end"
    ],
    "prefix": "cl",
    "description": "Create a class"
  },
  "local": {
    "body": ["local ${0}"],
    "prefix": "l",
    "description": "create a variable"
  },
  "assigment": {
    "body": ["local ${1:varName} = ${0:value}"],
    "prefix": "ll",
    "description": "create a variable"
  },
  "inline-function": {
    "body": ["local ${1:name} = function($2)", "\t${0:-- code}", "end"],
    "prefix": "f="
  },
  "forline": {
    "body": [
      "f = io.open(${1:\"${2:filename}\"}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0:-- code}",
      "end"
    ],
    "prefix": "forline",
    "description": "read file line by line"
  },
  "if": { "body": ["if ${1:true} then", "\t$0", "end"], "prefix": "if" }
}

